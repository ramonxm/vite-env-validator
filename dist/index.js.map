{"version":3,"sources":["../src/logger.ts","../src/validators/zod-validator.ts","../src/validators/yup-validator.ts","../src/validators/joi-validator.ts","../src/validate-env.ts","../src/validators/index.ts"],"sourcesContent":["export interface Logger {\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n  success(message: string): void;\n}\n\nclass ConsoleLogger implements Logger {\n  info(message: string): void {\n    console.log(`‚ÑπÔ∏è ${message}`);\n  }\n\n  warn(message: string): void {\n    console.warn(`‚ö†Ô∏è ${message}`);\n  }\n\n  error(message: string): void {\n    console.error(`‚ùå ${message}`);\n  }\n\n  success(message: string): void {\n    console.log(`‚úÖ ${message}`);\n  }\n}\n\nexport const logger = new ConsoleLogger();\n","import type { Validator, ValidatorResult } from '../types';\nimport type { z, ZodError } from 'zod';\nimport { logger } from '../logger';\n\nexport class ZodValidator implements Validator {\n  async validate(\n    env: Record<string, string>,\n    schema: z.ZodSchema\n  ): Promise<ValidatorResult[]> {\n    logger.info('üîç Validating environment variables with Zod...');\n\n    try {\n      const zodSchema = schema;\n      const result = zodSchema.safeParse(env);\n\n      if (!result.success) {\n        for (const issue of result.error.issues) {\n          const path = issue.path.length > 0 ? issue.path.join('.') : 'root';\n          logger.error(`  - ${path}: ${issue.message}`);\n        }\n        logger.error(\n          `Environment validation failed with error: ${result.error.message}`\n        );\n        process.exit(1);\n      }\n\n      logger.success('Environment validation successful!');\n\n      return Object.entries(result.data as Record<string, unknown>).map(\n        ([key, value]) => ({\n          key,\n          value,\n        })\n      );\n    } catch (err: unknown) {\n      const error = err as ZodError;\n\n      logger.error(\n        `Environment validation failed with error: ${error.message}`\n      );\n      process.exit(1);\n    }\n  }\n}\n","import type { Validator, ValidatorResult } from '../types';\nimport type { ObjectSchema, ValidationError } from 'yup';\nimport { logger } from '../logger';\n\nexport class YupValidator implements Validator {\n  async validate(\n    env: Record<string, string>,\n    schema: ObjectSchema<Record<string, unknown>>\n  ): Promise<ValidatorResult[]> {\n    logger.info('üîç Validating environment variables with Yup...');\n\n    try {\n      const yupSchema = schema;\n      const result = await yupSchema.validate(env, { abortEarly: false });\n\n      logger.success('Environment validation successful!');\n\n      return Object.entries(result).map(([key, value]) => ({\n        key,\n        value,\n      }));\n    } catch (err: unknown) {\n      const error = err as ValidationError;\n\n      if (error.inner) {\n        for (const validationError of error.inner) {\n          logger.error(\n            `  - ${validationError.path}: ${validationError.message}`\n          );\n        }\n      } else {\n        logger.error(`  - ${error.message}`);\n      }\n      logger.error(\n        `Environment validation failed with error: ${error.message}`\n      );\n      process.exit(1);\n    }\n  }\n}\n","import type { Validator, ValidatorResult } from '../types';\nimport type { Schema } from 'joi';\nimport type { ValidationError } from 'joi';\nimport { logger } from '../logger';\n\nexport class JoiValidator implements Validator {\n  async validate(\n    env: Record<string, string>,\n    schema: Schema\n  ): Promise<ValidatorResult[]> {\n    logger.info('üîç Validating environment variables with Joi...');\n\n    try {\n      const joiSchema = schema;\n      const result = await joiSchema.validateAsync(env, { abortEarly: false });\n\n      logger.success('Environment validation successful!');\n\n      return Object.entries(result).map(([key, value]) => ({ key, value }));\n    } catch (err: unknown) {\n      const error = err as ValidationError;\n\n      if (error.details) {\n        for (const detail of error.details) {\n          logger.error(`  - ${detail.path.join('.')}: ${detail.message}`);\n        }\n      } else {\n        logger.error(`  - ${error.message}`);\n      }\n      logger.error(\n        `Environment validation failed with error: ${error.message}`\n      );\n      process.exit(1);\n    }\n  }\n}\n","import path from 'node:path';\nimport { cwd } from 'node:process';\nimport { createConfigLoader } from 'unconfig';\nimport { type ConfigEnv, type Plugin, type UserConfig } from 'vite';\nimport { getValidators } from './validators';\nimport type { ValidationOptions } from './types';\nimport { logger } from './logger';\n\nasync function loadOptions(rootDir: string, inlineConfig: ValidationOptions) {\n  logger.info(`üìÅ Loading configuration from directory: ${rootDir}`);\n\n  const source = 'env';\n\n  const loader = createConfigLoader({\n    cwd: rootDir,\n    defaults: inlineConfig,\n    sources: [\n      { files: source, extensions: ['ts', 'cts', 'mts', 'js', 'cjs', 'mjs'] },\n    ],\n  });\n\n  const result = await loader.load();\n  const config = result.config;\n\n  if (!config) {\n    logger.error('Missing configuration for vite-plugin-env-validator');\n    process.exit(1);\n  }\n\n  logger.success('Configuration loaded successfully');\n  return config;\n}\n\nasync function validateEnvConfig(\n  userConfig: UserConfig,\n  envConfig: ConfigEnv,\n  inlineOptions: ValidationOptions\n) {\n  logger.info(`üîÑ Starting environment validation for mode: ${envConfig.mode}`);\n\n  const { normalizePath, loadEnv } = await import('vite');\n  const rootDir = userConfig.root || cwd();\n\n  const resolvedRoot = normalizePath(\n    userConfig.root ? path.resolve(userConfig.root) : process.cwd()\n  );\n\n  const envDir = userConfig.envDir\n    ? normalizePath(path.resolve(resolvedRoot, userConfig.envDir))\n    : resolvedRoot;\n\n  logger.info(`üìÇ Loading environment from: ${envDir}`);\n  const env = loadEnv(envConfig.mode, envDir, userConfig.envPrefix);\n  logger.info(`üî¢ Found ${Object.keys(env).length} environment variables`);\n\n  const options = (await loadOptions(\n    rootDir,\n    inlineOptions\n  )) as ValidationOptions;\n\n  const validators = await getValidators();\n  const validator = validators[options.validator];\n  if (!validator) {\n    logger.error(`Unsupported validator: ${options.validator}`);\n    logger.error(`Available validators: ${Object.keys(validators).join(', ')}`);\n    process.exit(1);\n  }\n\n  const variables = await validator.validate(env, options.schema);\n\n  if (!variables) {\n    logger.error('Environment validation failed - no variables returned');\n    process.exit(1);\n  }\n\n  const variableDefinitions = (\n    Array.isArray(variables) ? variables : []\n  ).reduce<Record<string, unknown>>((acc, variable) => {\n    const { key, value } = variable as { key: string; value: unknown };\n    if (key && value) {\n      acc[`import.meta.env.${key}`] = JSON.stringify(value);\n    }\n    return acc;\n  }, {});\n\n  return { define: variableDefinitions };\n}\n\nexport const validateEnv = (options: ValidationOptions): Plugin => {\n  return {\n    name: 'vite-plugin-env-validator',\n    config: (config, env) => validateEnvConfig(config, env, options),\n  };\n};\n","import type { Validator } from '../types';\nimport { logger } from '../logger';\n\nconst getValidators = async (): Promise<Record<string, Validator>> => {\n  const validators: Record<string, Validator> = {};\n\n  try {\n    const { ZodValidator } = await import('./zod-validator');\n    validators.zod = new ZodValidator();\n  } catch (error) {\n    logger.warn('Zod is not installed.');\n    process.exit(1);\n  }\n\n  try {\n    const { YupValidator } = await import('./yup-validator');\n    validators.yup = new YupValidator();\n  } catch (error) {\n    logger.warn('Yup is not installed.');\n    process.exit(1);\n  }\n\n  try {\n    const { JoiValidator } = await import('./joi-validator');\n    validators.joi = new JoiValidator();\n  } catch (error) {\n    logger.warn('Joi is not installed.');\n    process.exit(1);\n  }\n\n  return validators;\n};\n\nexport { getValidators };\n"],"mappings":"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","names":["path","ZodValidator","YupValidator","JoiValidator"]}